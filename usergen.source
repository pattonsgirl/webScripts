#!/bin/bash

## Script must be run as root, check
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root, exiting." 
   exit 1
fi

## Script requires installation of pwgen
## typically:  apt install pwgen
command -v pwgen >/dev/null 2>&1 || { echo >&2 "I require pwgen but it's not installed.  Aborting."; exit 1; }

echo -e "\n\n"
echo "1. Add instructor account(s) first"
echo "2. To use commands in script, source it with . usergen.source"
echo -e "\n\n"
echo "Functions provided by this file:"
echo "studentAccounts file_name.txt 	- Creates account based on list.  Add instructors with addInstruct"
echo "createSingleUser 			- Creates a single user.  Provide username after command"
echo "INSTRUCT_ACCT 			- Create files for instructor account.  Provide username and password after command"
echo "addInstruct file_name.txt 	- Add an instructor account.  Provide instructor username after command"
echo "removeList file_name.txt 		- Users in file and their directories will be removed"
echo "removeUSER 			- Removes a single user.  Provide username after command"
echo -e "\n\n"


## INPUT: path to sample html file to be created
## creates a sample html "It Works" file at specified location
itworks(){
  if [ -f $1 ]; then
    echo "$1 already exists, exiting."
    exit 1
  fi

  echo "<html>
<head>
<title>Hello World</title>
</head>

<body>
<h1>It Works!</h1>
</body>

</html>
" > $1
}

studentAccounts(){
	USERS=$(cat $1)
	read -p  "Enter file name to save IDs and press [ENTER]:" filename
	for user in $USERS
	do
		echo "Creating $user"
	        createSingleUser $user >> $filename
        done
}

createSingleUser(){
        if [ "$#" -ne 1 ]; then
                read -p "Enter student name and press [ENTER]: " user
        else
                user=$1
        fi
        if [ "$#" -ne 2 ]; then
                password=$(pwgen -v 5 1)
        else
                password=$2
        fi
  	echo "$user:$password::::/home/$user:/bin/bash" > /tmp/userfile
	$(newusers /tmp/userfile)
        mkdir -v /home/$user/html/
        htpasswd -cb /home/$user/html/.htpasswd $user $password
        printf "AuthType Basic\nAuthName \"Enter Twilight Zone\"\nAuthUserFile /home/$user/html/.htpasswd\nRequire user $user $instruct" > /home/$user/html/.htaccess
        itworks /home/$user/html/index.html
        lockdownuser $user
        echo "$user - $password"
}

INSTRUCT_ACCT(){
        read -p "Enter instructor name and press [ENTER]" instruct
        read -p "Enter instructor password and press [ENTER]" instruct_pass
        echo "Creating .htpasswd"
        mkdir -v /home/$instruct/html/
        htpasswd -cb /home/$instruct/html/.htpasswd $instruct $instruct_pass
        echo "Creating .htaccess"
        #password protection to restrict to just that user and instructor
        printf "AuthType Basic\nAuthName \"Enter Twilight Zone\"\nAuthUserFile /home/$instruct/html/.htpasswd\nRequire user $instruct" > /home/$instruct/html/.htaccess
        echo "Creating index.html in dir html for $instruct"
        itworks /home/$instruct/html/index.html
        lockdownuser $instruct
}


addInstruct(){
        #reads off from user file
        USERS=$(cat $1)
        read -p "Enter instructor name and press [ENTER]" instruct
	read -p "Enter instructor password and press [ENTER]" instruct_pass
        echo "$instruct - $instruct_pass"
        for user in $USERS
        do
                echo "$user exists - adding TA"
                usermod -a -G $user $instruct
                htpasswd -b /home/$user/html/.htpasswd $instruct $instruct_pass
                echo "Fixing .htaccess"
                #password protection to restrict to just that user and instructor
		echo -n " $instruct" >> /home/$user/html/.htaccess
        done
}

lockdownuser(){
	echo "Locking down sftp and ssh access for $1"
	chown -R www-data /home/$1
	chgrp -R $1 /home/$1
	chmod -R ug+rw /home/$1 
	chmod -R o-rwx /home/$1
	echo "Making it so permissions persist"
	chmod -R ug+s /home/$1
}

removeList(){
 	USERS=$(cat $1)
 	for user in $USERS
 	do
 		deluser --quiet $user
 		delgroup $user
 		rm -R /home/$user
 	done
 	echo "REMINDER: Remove User ID list"
}

removeUSER(){
 	echo -n "Enter name of user to REMOVE and press [ENTER]: "
	read user
 	deluser --quiet $user
 	delgroup $user
 	rm -R /home/$user
}
